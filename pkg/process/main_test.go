package process

import (
	"testing"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

func TestJobSubmission(t *testing.T) {
	a := assert.New(t)
	called := false

	p := func(ctx *gin.Context) {
		called = true
	}
	ctx := &gin.Context{}
	s := make(chan time.Time, 2)

	a.NotPanics(func() {
		jobSubmission(p, ctx, s)()

		a.True(called, "Proc should be called from jobSubmission()")

		first, second := <-s, <-s

		a.NotNil(first, "A time should be returned from the channel")
		a.NotNil(second, "A second time should be returned from the channel")
		a.Greaterf(second, first, "The first time should be earlier than the second")
	})

	close(s)
}

func TestCaptureJob(t *testing.T) {
	a := assert.New(t)

	l, logs := observer.New(zap.InfoLevel)
	log := zap.New(l).Sugar()

	s := make(chan time.Time, 2)

	a.NotPanics(func() {
		s <- time.Now()
		s <- time.Now()

		captureJob(log, s)
		close(s)

		entry := logs.All()[0]
		a.Equal(entry.Level, zap.InfoLevel, "Log generated by captureJob() should be Info")
		a.Equal(entry.Message, "background_process_complete", "Log generated by captureJob() should be background_process_complete")
	})
}
