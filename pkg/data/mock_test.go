// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/types/data.go
//
// Generated by this command:
//
//	mockgen -destination pkg/data/mock_test.go -package data -source pkg/types/data.go -write_generate_directive
//

// Package data is a generated GoMock package.
package data

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -destination pkg/data/mock_test.go -package data -source pkg/types/data.go -write_generate_directive

// MockStmt is a mock of Stmt interface.
type MockStmt struct {
	ctrl     *gomock.Controller
	recorder *MockStmtMockRecorder
}

// MockStmtMockRecorder is the mock recorder for MockStmt.
type MockStmtMockRecorder struct {
	mock *MockStmt
}

// NewMockStmt creates a new mock instance.
func NewMockStmt(ctrl *gomock.Controller) *MockStmt {
	mock := &MockStmt{ctrl: ctrl}
	mock.recorder = &MockStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStmt) EXPECT() *MockStmtMockRecorder {
	return m.recorder
}

// GetBool mocks base method.
func (m *MockStmt) GetBool(colName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", colName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBool indicates an expected call of GetBool.
func (mr *MockStmtMockRecorder) GetBool(colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockStmt)(nil).GetBool), colName)
}

// GetBytes mocks base method.
func (m *MockStmt) GetBytes(colName string, buf []byte) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", colName, buf)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockStmtMockRecorder) GetBytes(colName, buf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockStmt)(nil).GetBytes), colName, buf)
}

// GetFloat mocks base method.
func (m *MockStmt) GetFloat(colName string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat", colName)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetFloat indicates an expected call of GetFloat.
func (mr *MockStmtMockRecorder) GetFloat(colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat", reflect.TypeOf((*MockStmt)(nil).GetFloat), colName)
}

// GetInt64 mocks base method.
func (m *MockStmt) GetInt64(colName string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt64", colName)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetInt64 indicates an expected call of GetInt64.
func (mr *MockStmtMockRecorder) GetInt64(colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt64", reflect.TypeOf((*MockStmt)(nil).GetInt64), colName)
}

// GetText mocks base method.
func (m *MockStmt) GetText(colName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetText", colName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetText indicates an expected call of GetText.
func (mr *MockStmtMockRecorder) GetText(colName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetText", reflect.TypeOf((*MockStmt)(nil).GetText), colName)
}
